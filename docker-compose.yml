version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: apriori_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-apriori}
      POSTGRES_USER: ${POSTGRES_USER:-apriori_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-apriori_secure_pass_2024}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=es_ES.UTF-8 --lc-ctype=es_ES.UTF-8"
    ports:
      - "4207:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - apriori_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-apriori_user} -d ${POSTGRES_DB:-apriori}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # FastAPI Backend
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: apriori_backend
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-apriori_user}:${POSTGRES_PASSWORD:-apriori_secure_pass_2024}@db:5432/${POSTGRES_DB:-apriori}
      
      # JWT
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-super-secret-jwt-key-change-in-production}
      JWT_ALGORITHM: HS256
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: 10080
      
      # API Keys
      OPENAI_API_KEY: ${OPENAI_API_KEY:-your-openai-api-key}
      ELEVENLABS_API_KEY: ${ELEVENLABS_API_KEY:-your-elevenlabs-api-key}
      
      # CORS
      CORS_ORIGINS: "http://localhost:4204,http://35.208.175.9:4204,https://apriori.enkisys.com"
      
      # App
      APP_NAME: "I.A Priori"
      APP_VERSION: "2.0.0"
      DEBUG: ${DEBUG:-false}
      
    ports:
      - "4205:8000"
    volumes:
      - ./logs:/app/logs
    networks:
      - apriori_network
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: apriori_frontend
    restart: unless-stopped
    ports:
      - "4206:3000"
    networks:
      - apriori_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: apriori_nginx
    restart: unless-stopped
    ports:
      - "4204:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - apriori_network
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local

networks:
  apriori_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 